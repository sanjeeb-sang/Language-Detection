import math
from typing import List, Dict
from klass import Klass

"""
Author: Sanjeeb  
"""


class NaiveBayesPredictionContext:
    """
    Class that holds important information generated by the naive bayes algorithm
    """

    def __init__(self, all_vocabulary: set[str], klasses_dict: Dict[str, Klass],
                 total_documents_processed: int, ngram_number: int, prior_probability_dict: Dict[str, float],
                 highest_prior_prob_klass: Klass, total_vocabulary_size: int):
        """
        Initialization method for the NaiveBayesPredictionContext class
        :param all_vocabulary: set containing all the vocabulary encountered during processing
        :param klasses_dict: dictionary containing all the klasses
        :param total_documents_processed: total number of documents processed during training
        :param ngram_number: the ngram number. If it's 2, it is bigram, if it's 3, it's trigram, and so on....
        :param prior_probability_dict: Dictionary containing the prior probability of all klasses.
        :param highest_prior_prob_klass: Klass that has the highest prior probability.
        :param total_vocabulary_size: the size of the entire vocabulary.
        """
        self.all_vocabulary: set[str] = all_vocabulary
        self.klasses_dict: Dict[str, Klass] = klasses_dict
        self.total_documents_processed: int = total_documents_processed
        self.ngram_number: int = ngram_number
        self.prior_probability_dict: Dict[str, float] = prior_probability_dict
        self.klass_with_highest_prior_probability: Klass = highest_prior_prob_klass
        self.total_vocabulary_size: int = total_vocabulary_size


def is_ngram_in_all_vocabulary(ngram: str, all_vocabulary_set: set[str]) -> bool:
    """
    Method to check if the provided ngram is in all vocabulary
    :param ngram: the ngram to check
    :param all_vocabulary_set: the entire vocabulary or the vocabulary of all klasses
    :return: true if ngram is in vocabulary, false if it's not in the vocabulary
    """
    if ngram in all_vocabulary_set:
        return True
    return False


def calculate_likelihood(klass_to_check: Klass, test_ngrams: List[str], all_vocabulary: set[str]) -> List[float]:
    """
    Method to calculate the likelihood that a list of ngrams are in a particular class (referred to as klass).
    This probability is calculated in logspace and the returned value is also in logspace.
    :param all_vocabulary: Set containing all the vocabulary encountered during training
    :param klass_to_check: the klass with which the likelihood of list of ngrams is calculated.
    :param test_ngrams: list of ngrams whose likelihood of being in the provided class (or klass) is to be determined.
    :return: a floating point probability of ngrams being in the provided class (probability is in logspace).
    """
    probs_list: List[float] = []
    for ngram in test_ngrams:
        if is_ngram_in_all_vocabulary(ngram, all_vocabulary):
            ngrams_count: int = klass_to_check.find_count(ngram)
            total_number_of_tokens: int = klass_to_check.get_total_ngrams()
            ngram_likelihood: float = (ngrams_count) / (total_number_of_tokens)
            probs_list.append(ngram_likelihood)

    return probs_list


def multiply_using_log(list_with_non_log_floats: List[float]) -> float:
    """
    Method where log is used to multiple and get the values of many small floating point numbers
    :param list_with_non_log_floats: list containing floating point numbers whose multiplication needs to be calculated
    :return: the result of the multiplication, and whether the product is zero
    """
    total_log_value: float = 0
    for list_item in list_with_non_log_floats:
        if list_item == 0:
            return 0
        log_value: float = math.log10(list_item)
        total_log_value += log_value

    return 10 ** total_log_value


def calculate_probability(klass_to_check: Klass, list_of_test_ngrams: List[str],
                          predict_context: NaiveBayesPredictionContext) -> float:
    """
    Method to calculate the of a list of ngrams belonging to a particular class (referred to as klass).
    This probability is calculated in logspace and the returned value is also in logspace.
    :param predict_context: class containing various information generated by running the naive bayes algorithm.
    :param klass_to_check: the klass with which the probability of the passed list of ngrams is calculated.
    :param list_of_test_ngrams: list of ngrams whose probability of being in the provided class (or klass) is to be determined.
    """
    prior_probability: float = predict_context.prior_probability_dict[klass_to_check.get_class_label()]
    likelihood_probabilities_list: List[float] = calculate_likelihood(klass_to_check, list_of_test_ngrams,
                                                                      predict_context.all_vocabulary)
    if likelihood_probabilities_list is None or len(likelihood_probabilities_list) == 0:
        return prior_probability

    likelihood_probabilities_list.append(prior_probability)
    actual_probability: float = multiply_using_log(likelihood_probabilities_list)

    return actual_probability


def create_prior_probability_dict(klass_dict: Dict, total_documents_processed: int) -> Dict[str, float]:
    """
    Method to create a dictionary whose keys would be the class labels and whose values would be the prior probability of those classes
    :param klass_dict: dictionary containing all klass names and klass objects
    :param total_documents_processed: total number of documents processed during training
    :return: dictionary whose keys are the klass labels and whose values are the prior probabilities
    """
    prior_prob_dict: Dict[str, float] = {}
    for klass_key, klass_object in klass_dict.items():
        number_of_documents_in_klass = klass_object.get_number_of_training_texts()
        prior_prob: float = number_of_documents_in_klass / total_documents_processed
        prior_prob_dict[klass_key] = prior_prob

    return prior_prob_dict


def predict_class(ngrams: List[str], predict_context: NaiveBayesPredictionContext) -> Klass:
    """
    Method to predict the klass (or machine learning class) of a provided test word
    :param predict_context: object containing important information generated by the naive bayes algorithm
    :param ngrams: ngrams generated from the test word whose class is to be determined
    values are the klass object instances.
    :return: the Klass object instance which maximizes the probability.
    """
    max_probability_klass: Klass = None
    max_prob: float = 0
    first_iter: bool = True

    if ngrams is None or len(ngrams) == 0:
        return predict_context.klass_with_highest_prior_probability

    for klass_key, klass_value in predict_context.klasses_dict.items():
        probability: float = calculate_probability(klass_value, ngrams, predict_context)
        if probability > max_prob or first_iter:
            first_iter = False
            max_probability_klass = klass_value
            max_prob = probability

    if max_probability_klass is None or max_prob == 0:
        return predict_context.klass_with_highest_prior_probability

    return max_probability_klass
